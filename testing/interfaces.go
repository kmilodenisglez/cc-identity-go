package testing

import (
	"github.com/hyperledger/fabric-chaincode-go/pkg/cid"
	"github.com/hyperledger/fabric-chaincode-go/shim"
	"github.com/hyperledger/fabric-contract-api-go/contractapi"
)

/*
These unit tests use mocks to simulate chaincode-api & fabric interactions
The mocks are generated using counterfeiter directives in the comments (starting with "go:generate counterfeiter")
All files in mocks/* are generated by running following, in the directory with your directive:
	`go generate ./...`
*/

// You only need **one** of these per package!
//go:generate go run github.com/maxbrunsfeld/counterfeiter/v6 -generate

//counterfeiter:generate -o mocks/contract.go -fake-name ContractInterface . contract
type contract interface {
	contractapi.ContractInterface
}

//counterfeiter:generate -o mocks/settabletransactioncontext.go -fake-name SettableTransactionContextInterface . settableTransactionContext
type settableTransactionContext interface {
	contractapi.SettableTransactionContextInterface
}

//counterfeiter:generate -o mocks/transaction.go -fake-name TransactionContext . transactionContext
type transactionContext interface {
	contractapi.TransactionContextInterface
}

//counterfeiter:generate -o mocks/chaincodestub.go -fake-name ChaincodeStub . chaincodeStub
type chaincodeStub interface {
	shim.ChaincodeStubInterface
}

//counterfeiter:generate -o mocks/statequeryiterator.go -fake-name StateQueryIterator . stateQueryIterator
type stateQueryIterator interface {
	shim.StateQueryIteratorInterface
}

//counterfeiter:generate -o mocks/clientIdentity.go -fake-name ClientIdentity . clientIdentity
type clientIdentity interface {
	cid.ClientIdentity
}

//counterfeiter:generate -o mocks/historyQueryIterator.go -fake-name HistoryQueryIteratorInterface . historyQueryIterator
type historyQueryIterator interface {
	shim.HistoryQueryIteratorInterface
}
