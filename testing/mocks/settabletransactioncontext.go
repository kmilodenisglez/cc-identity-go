// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-chaincode-go/pkg/cid"
	"github.com/hyperledger/fabric-chaincode-go/shim"
)

type SettableTransactionContextInterface struct {
	SetClientIdentityStub        func(cid.ClientIdentity)
	setClientIdentityMutex       sync.RWMutex
	setClientIdentityArgsForCall []struct {
		arg1 cid.ClientIdentity
	}
	SetStubStub        func(shim.ChaincodeStubInterface)
	setStubMutex       sync.RWMutex
	setStubArgsForCall []struct {
		arg1 shim.ChaincodeStubInterface
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SettableTransactionContextInterface) SetClientIdentity(arg1 cid.ClientIdentity) {
	fake.setClientIdentityMutex.Lock()
	fake.setClientIdentityArgsForCall = append(fake.setClientIdentityArgsForCall, struct {
		arg1 cid.ClientIdentity
	}{arg1})
	stub := fake.SetClientIdentityStub
	fake.recordInvocation("SetClientIdentity", []interface{}{arg1})
	fake.setClientIdentityMutex.Unlock()
	if stub != nil {
		fake.SetClientIdentityStub(arg1)
	}
}

func (fake *SettableTransactionContextInterface) SetClientIdentityCallCount() int {
	fake.setClientIdentityMutex.RLock()
	defer fake.setClientIdentityMutex.RUnlock()
	return len(fake.setClientIdentityArgsForCall)
}

func (fake *SettableTransactionContextInterface) SetClientIdentityCalls(stub func(cid.ClientIdentity)) {
	fake.setClientIdentityMutex.Lock()
	defer fake.setClientIdentityMutex.Unlock()
	fake.SetClientIdentityStub = stub
}

func (fake *SettableTransactionContextInterface) SetClientIdentityArgsForCall(i int) cid.ClientIdentity {
	fake.setClientIdentityMutex.RLock()
	defer fake.setClientIdentityMutex.RUnlock()
	argsForCall := fake.setClientIdentityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *SettableTransactionContextInterface) SetStub(arg1 shim.ChaincodeStubInterface) {
	fake.setStubMutex.Lock()
	fake.setStubArgsForCall = append(fake.setStubArgsForCall, struct {
		arg1 shim.ChaincodeStubInterface
	}{arg1})
	stub := fake.SetStubStub
	fake.recordInvocation("SetStub", []interface{}{arg1})
	fake.setStubMutex.Unlock()
	if stub != nil {
		fake.SetStubStub(arg1)
	}
}

func (fake *SettableTransactionContextInterface) SetStubCallCount() int {
	fake.setStubMutex.RLock()
	defer fake.setStubMutex.RUnlock()
	return len(fake.setStubArgsForCall)
}

func (fake *SettableTransactionContextInterface) SetStubCalls(stub func(shim.ChaincodeStubInterface)) {
	fake.setStubMutex.Lock()
	defer fake.setStubMutex.Unlock()
	fake.SetStubStub = stub
}

func (fake *SettableTransactionContextInterface) SetStubArgsForCall(i int) shim.ChaincodeStubInterface {
	fake.setStubMutex.RLock()
	defer fake.setStubMutex.RUnlock()
	argsForCall := fake.setStubArgsForCall[i]
	return argsForCall.arg1
}

func (fake *SettableTransactionContextInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setClientIdentityMutex.RLock()
	defer fake.setClientIdentityMutex.RUnlock()
	fake.setStubMutex.RLock()
	defer fake.setStubMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SettableTransactionContextInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
